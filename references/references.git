# References File: git

# Initial Setup:

git config --global user.name <username>
git config --global user.email <email>
git config --global core.editor [nano|emacs|vim]

# Create a repo. Make sure there is at least one file in it (even just the README) Generate ssh key:
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

# Copy the contents of the file ~/.ssh/id_rsa.pub to your SSH keys in your GitHub account settings. Test SSH key:

ssh -T git@github.com

# Clone the repo:
git clone git://github.com/username/your-repository

# Now cd to your git clone folder and do:

git remote set-url origin git@github.com:username/your-repository.git

# Now try editing a file (try the README) and then do:

git add -A
git commit -am "my update msg"
git push

# Other Git Commands

git init - Initialize an empty git or re-initialize an existing project
git remote add origin https://github.com/username/myproject.git - Add remote git repo location
git remote -v - View remote git repo location
git status - See status of what files have yet to be commit, any changes, current branch
git add <FILE> - Add file to git repo
git commit -m â€œChanges made in this commit"
git push - Push all commits
git rebase - Update your local repo 

# View staged commits
git cherry -v
git log --branches --not --remotes

# References

Online guides: http://rogerdudler.github.io/git-guide/
Git Manual: http://git-scm.com/book/en/v2
Video Git: https://www.youtube.com/watch?v=8oRjP8yj2Wo&list=PLg7s6cbtAD165JTRsXh8ofwRw0PqUnkVH

### After cloning a repository (eg. forking) and attempting to push changes, you may have to run the following
git remote -v 
git remote remove origin 
git remote add origin git@github.com:user/repo.git 
git push -u origin master

# Cleaning up your repository - From: https://github.com/18F/C2/issues/439
# Run from the root of your repository
# Identify large files
git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -n 10
# To see what each file is, run this:
git rev-list --objects --all | grep [first few chars of the sha1 from previous output]
# Replace *.mov with the filetype you want to remove
git filter-branch --index-filter 'git rm --cached --ignore-unmatch *.mov' -- --all
rm -Rf .git/refs/original
rm -Rf .git/logs/
git gc --aggressive --prune=now
# Verify your size-pack is now smaller
git count-objects -v

# Rollback Git
git reset --hard HEAD^1 will take you back one commit from what you pulled. 
If you want it back to the state it was in before you pulled, use git reset --hard HEAD@{1}. 
The @{1} tracks where the head was at before the last operation that changed it in your local repo, so it will go back several commits if several were pushed before you did your pull. 
Also see git reflog to show the entire list.
